{"ast":null,"code":"var _jsxFileName = \"/Users/charlesbuckley/coding/uniswap-v3-subgraph/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_PAIR_VOLUME = gql`\n  query pairVolume($id: ID!, $startTime: Int!, $endTime: Int!) {\n    pair(id: $id) {\n      token0 {\n        symbol\n      }\n      token1 {\n        symbol\n      }\n      volumeUSD(\n        where: {\n          timestamp_gte: $startTime,\n          timestamp_lte: $endTime\n        }\n      )\n    }\n  }\n`;\nfunction App(_ref) {\n  _s();\n  let {\n    pairId,\n    startTime,\n    endTime\n  } = _ref;\n  const [volume, setVolume] = useState(null);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PAIR_VOLUME, {\n    variables: {\n      id: pairId,\n      startTime,\n      endTime\n    }\n  });\n  useEffect(() => {\n    if (data && data.pair) {\n      setVolume(data.pair.volumeUSD);\n    }\n  }, [data]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Volume for \", data.pair.token0.symbol, \"/\", data.pair.token1.symbol, \" from\", ' ', new Date(startTime * 1000).toLocaleDateString(), \" to\", ' ', new Date(endTime * 1000).toLocaleDateString(), \":\", ' ', new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(volume)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ADGKkdkhQLrRW21FsPHxxMzH2DE=\", false, function () {\n  return [useQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","gql","useQuery","jsxDEV","_jsxDEV","GET_PAIR_VOLUME","App","_ref","_s","pairId","startTime","endTime","volume","setVolume","loading","error","data","variables","id","pair","volumeUSD","children","fileName","_jsxFileName","lineNumber","columnNumber","token0","symbol","token1","Date","toLocaleDateString","Intl","NumberFormat","style","currency","format","_c","$RefreshReg$"],"sources":["/Users/charlesbuckley/coding/uniswap-v3-subgraph/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\nconst GET_PAIR_VOLUME = gql`\n  query pairVolume($id: ID!, $startTime: Int!, $endTime: Int!) {\n    pair(id: $id) {\n      token0 {\n        symbol\n      }\n      token1 {\n        symbol\n      }\n      volumeUSD(\n        where: {\n          timestamp_gte: $startTime,\n          timestamp_lte: $endTime\n        }\n      )\n    }\n  }\n`;\n\nfunction App({ pairId, startTime, endTime }) {\n  const [volume, setVolume] = useState(null);\n\n  const { loading, error, data } = useQuery(GET_PAIR_VOLUME, {\n    variables: { id: pairId, startTime, endTime },\n  });\n\n  useEffect(() => {\n    if (data && data.pair) {\n      setVolume(data.pair.volumeUSD);\n    }\n  }, [data]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div>\n      <p>\n        Volume for {data.pair.token0.symbol}/{data.pair.token1.symbol} from{' '}\n        {new Date(startTime * 1000).toLocaleDateString()} to{' '}\n        {new Date(endTime * 1000).toLocaleDateString()}:{' '}\n        {new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n        }).format(volume)}\n      </p>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,eAAe,GAAGJ,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASK,GAAGA,CAAAC,IAAA,EAAiC;EAAAC,EAAA;EAAA,IAAhC;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAAJ,IAAA;EACzC,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAM;IAAEe,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGd,QAAQ,CAACG,eAAe,EAAE;IACzDY,SAAS,EAAE;MAAEC,EAAE,EAAET,MAAM;MAAEC,SAAS;MAAEC;IAAQ;EAC9C,CAAC,CAAC;EAEFX,SAAS,CAAC,MAAM;IACd,IAAIgB,IAAI,IAAIA,IAAI,CAACG,IAAI,EAAE;MACrBN,SAAS,CAACG,IAAI,CAACG,IAAI,CAACC,SAAS,CAAC;IAChC;EACF,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEV,IAAIF,OAAO,EAAE,oBAAOV,OAAA;IAAAiB,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAI;EACrC,IAAIV,KAAK,EAAE,oBAAOX,OAAA;IAAAiB,QAAA,EAAG;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAI;EAEjC,oBACErB,OAAA;IAAAiB,QAAA,eACEjB,OAAA;MAAAiB,QAAA,GAAG,aACU,EAACL,IAAI,CAACG,IAAI,CAACO,MAAM,CAACC,MAAM,EAAC,GAAC,EAACX,IAAI,CAACG,IAAI,CAACS,MAAM,CAACD,MAAM,EAAC,OAAK,EAAC,GAAG,EACtE,IAAIE,IAAI,CAACnB,SAAS,GAAG,IAAI,CAAC,CAACoB,kBAAkB,EAAE,EAAC,KAAG,EAAC,GAAG,EACvD,IAAID,IAAI,CAAClB,OAAO,GAAG,IAAI,CAAC,CAACmB,kBAAkB,EAAE,EAAC,GAAC,EAAC,GAAG,EACnD,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAC9BC,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE;MACZ,CAAC,CAAC,CAACC,MAAM,CAACvB,MAAM,CAAC;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACf;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEV;AAACjB,EAAA,CA7BQF,GAAG;EAAA,QAGuBJ,QAAQ;AAAA;AAAAkC,EAAA,GAHlC9B,GAAG;AA+BZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}